//alert("TODO_0: —Å–¥–µ–ª–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞. –ï—Å–ª–∏ –æ–Ω –≥–æ—Å—Å–ª—É–∂–∞—â–∏–π, —Ç–æ –º—ã –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–æ—á–∫—É '–ø–µ—Ä–µ–π—Ç–∏ –≤ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ'(–æ–Ω–∞ –µ—Å—Ç—å –≤ —Ö—Ç–º–ª—å–∫–µ), –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ (–∫–æ—Ç–æ—Ä—É—é –º—ã —â–∞ –∞–∫—Ç–∏–≤–Ω–æ –¥–µ–ª–∞–µ–º. –Ω–∞–≤–µ—Ä–Ω–æ). –ï—Å–ª–∏ –¥–µ–ª–æ–≤–æ–π –≤–∞–∂–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, —Ç–æ –º—ã –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–æ—á–∫—É '–ø–µ—Ä–µ–π—Ç–∏ –≤ —Ñ–∏—Ä–º—É' (–æ–Ω–∞ —Ç–æ–∂–µ –µ—Å—Ç—å –≤ —Ö—Ç–º–ª), –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏—Ä–º—ã (–∫–æ—Ç–æ—Ä—É—é –º—ã —Ç–æ–∂–µ –¥–µ–ª–∞–µ–º, –Ω–æ –Ω–µ —Ç–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ).");

function lightDarkToggle (toggle) { //–û—Ç—Ä–∏—Å–æ–≤—â–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (typeof localStorage["Toggle"] != "string") {
    localStorage["Toggle"] = "true";
  }

  let h1 = document.querySelector("#info").querySelectorAll("h1");
  let h2 = document.querySelector("#info").querySelectorAll("h2");
  let li = document.querySelectorAll("li");
  let hr = document.getElementById("main-hr");
  let toggle_btn = document.getElementById("lightDarkToggle");

  if (localStorage["Toggle"] == "true") {
    toggle_btn.textContent = "üåö";
    try { hr.style.backgroundColor = "#000"; hr.style.borderColor = "#000";} catch {};
    try { for (i = 0; i < h1.length; i++) { h1[i].style.color = "#000"}} catch {}; 
    try { for (i = 0; i < h2.length; i++) { h2[i].style.color = "#000"}} catch {};
    try { for (i = 0; i < li.length; i++) { li[i].style.color = "#000"}} catch {};
    document.body.style.backgroundColor = "#fff"; document.body.animate([{opacity: 0}, {opacity: 1}], { duration: 1000});
    if (toggle) {localStorage["Toggle"] = "false"; location.reload();}
  }
  else {
    toggle_btn.textContent = "‚òÄ";
    try { hr.style.backgroundColor = "#fff"; hr.style.borderColor = "#fff";} catch {};
    try { for (i = 0; i < h1.length; i++) { h1[i].style.color = "#fff"}} catch {}; 
    try { for (i = 0; i < h2.length; i++) { h2[i].style.color = "#fff"}} catch {};
    try { for (i = 0; i < li.length; i++) { li[i].style.color = "#fff"}} catch {};
    document.body.style.backgroundColor = "#000"; document.body.animate([{opacity: 0}, {opacity: 1}], { duration: 1000});
    if (toggle) {localStorage["Toggle"] = "true"; location.reload();}
  }
}



function transferModal () { //–ú–æ–¥–∞–ª–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–∏–≥—Ä–æ–∫/—É—á–∏—Ç–µ–ª—å)
  let func_name = localStorage.getItem("isTeacher") == "true" ? "getTeacherSalary" : "getTransfer";
  let modal = document.createElement("div");
  modal.classList.add("modal");
  document.body.append(modal);
  modal.insertAdjacentHTML("afterbegin", `
  <div id="modal-overlay" class="modal-overlay">
    <div id="modal-window" class="modal-window">
      <div class="modal-header">
        <span class="modal-title">–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É</span>
      </div>
      <form id="transferForm" method="post">
        <div class="modal-body">
          <input autocomplete="off" maxlength="15" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞: " required>
          <input autocomplete="off" type="number" placeholder="–ö–æ–ª-–≤–æ —Ç–∞–ª–∏—Ü: " required>
        </div>
        <div class="modal-footer">
          <button onclick="pinCode('${func_name}')" type="button" class="btn-orange">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
          <button onclick="modalCancel()" id="modal_cancel_id" type="button" class="btn-orange">–í—ã–π—Ç–∏</button>
        </div>
      </form>
    </div>
  </div>`);
}



function firmModal () { //–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–≥—Ä–æ–∫/—É—á–∏—Ç–µ–ª—å)
  func_name = "getPayFirm";
  let modal = document.createElement("div");
  modal.classList.add("modal");
  document.body.append(modal);
  modal.insertAdjacentHTML("afterbegin", `
  <div id="modal-overlay" class="modal-overlay">
    <div id="modal-window" class="modal-window">
      <div class="modal-header">
        <span class="modal-title">–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Ñ–∏—Ä–º—ã</span>
      </div>
      <div id="modal-body" class="modal-body">
        <input autocomplete="off" maxlength="20" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—Ä–º—É: " required>
        <input autocomplete="off" maxlength="20" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É: " required>
      </div>
      <div class="modal-footer">
        <button onclick="pinCode('${func_name}')" type="button" class="btn-orange">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        <button id="modal_cancel_id" type="button" onclick="modalCancel()" class="btn-orange">–í—ã–π—Ç–∏</button>
      </div>  
    </div>
  </div>`);
}



function cashCardTransfer () { //–ú–æ–¥–∞–ª–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –≤ –Ω–∞–ª–∏—á–Ω—ã–µ (–º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —ç–∫–æ–Ω–æ–º–∏–∫–∏)
  let modal = document.createElement("div");
  modal.classList.add("modal");
  document.body.append(modal);
  modal.insertAdjacentHTML("afterbegin", `
  <div id="modal-overlay" class="modal-overlay">
    <div id="modal-window" class="modal-window">
      <div class="modal-header">
        <span class="modal-title">–ü–µ—Ä–µ–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤ –Ω–∞–ª–∏—á–Ω—ã–µ</span>
      </div>
      <div id="modal-body" class="modal-body">
        <input autocomplete="off" maxlength="15" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞: " required>
        <input autocomplete="off" type="number" placeholder="–ö–æ–ª-–≤–æ —Ç–∞–ª–∏—Ü: " required>
      </div>
      <div class="modal-footer">
        <button onclick="pinCode()" type="button" class="btn-orange">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        <button id="modal_cancel_id" type="button" onclick="modalCancel()" class="btn-orange">–í—ã–π—Ç–∏</button>
      </div> 
    </div>
  </div>`);
}


function editEmployees () {
  let modal = document.createElement("div");
  modal.classList.add("modal");
  document.body.append(modal);
  modal.insertAdjacentHTML("afterbegin", `
  <div id="modal-overlay" class="modal-overlay">
    <div id="modal-window" class="modal-window">
      <div class="modal-header">
        <span class="modal-title">–†–∞–±–æ—Ç–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</span>
      </div>
      <div id="modal-body" class="modal-body">
        <input autocomplete="off" maxlength="15" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞: " required>
        <input autocomplete="off" type="password" maxlength="15" placeholder="–ü–æ–¥–ø–∏—Å—å –º–∏–Ω–∏—Å—Ç—Ä–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏: " required>
      </div>
      <div class="modal-footer">
        <button onclick="getAddEmployee()" type="button" class="btn-orange">–ù–∞–Ω—è—Ç—å</button>
        <button onclick="getRemoveEmployee()" type="button" class="btn-orange">–£–≤–æ–ª–∏—Ç—å</button>
        <button id="modal_cancel_id" type="button" onclick="modalCancel()" class="btn-orange">–í—ã–π—Ç–∏</button>
      </div> 
    </div>
  </div>`);
}


function finePlayer () { //–®—Ç—Ä–∞—Ñ–Ω–∏–∫ –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –µ–≥–æ –¥–æ–ª–≥–æ–≤ (—é—Å—Ç–∏—Ü–∏–∏)
  let modal = document.createElement("div");
  modal.classList.add("modal");
  document.body.append(modal);
  modal.insertAdjacentHTML("afterbegin", `
  <div id="modal-overlay" class="modal-overlay">
    <div id="modal-window" class="modal-window">
      <div class="modal-header">
        <span class="modal-title">–ù–µ—É–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞</span>
      </div>
      <div id="modal-body" class="modal-body">
        <input id="input_1" autocomplete="off" maxlength="32" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞: " name="player-name" required>
        <h2>–ò–≥—Ä–æ–∫: –ü–µ–ª—å–º–µ–Ω—å –ê–Ω–¥—Ä–µ–µ–≤–∏—á</h2>
        <span>–°—Ç–∞—Ç—É—Å –Ω–∞–ª–æ–≥–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</span><span style="background-color: #fe9654; color: #000" class="modal-frame">–Ω–µ—É–ø–ª–∞—á–µ–Ω—ã</span><br>
        <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∞—Ñ–æ–≤:</span><span style="background-color: #fe9654; color: #000" class="modal-frame">3</span>
      </div>
      <div class="modal-footer">
        <button onclick="finePlayerFind()" type="button" class="btn-orange">–ù–∞–π—Ç–∏</button>
        <button onclick="finePlayerPay()" type="button" class="btn-orange">–û—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ª–æ–≥–∏</button>
        <button id="modal_cancel_id" type="button" onclick="modalCancel()" class="btn-orange">–í—ã–π—Ç–∏</button>
      </div>  
    </div>
  </div>`);
}



function taxLogs () { //–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —à—Ç—Ä–∞—Ñ–Ω–∏–∫–æ–≤ (–ú–í–î)
  let transfer_div = document.getElementById("log-table");
  let transfer_btn = document.getElementById("transfers");
    transfer_div = document.createElement("div");
    transfer_div.classList.add("log-table");
    transfer_div.setAttribute("id", "log-table");
    document.body.append(transfer_div); //transfer_div.innerHTML += ${...};
    transfer_div.insertAdjacentHTML("afterbegin", ` 
    <h2>–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∏–≥—Ä–æ–∫–∏, –ø—Ä–æ—Å—Ä–æ—á–∏–≤—à–∏–µ —É–ø–ª–∞—Ç—É –Ω–∞–ª–æ–≥–æ–≤ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã</h2>
    <hr>
    <h2>–û–±—Ä–∞–∑–µ—Ü:</h2>
    <h2>|–ò–≥—Ä–æ–∫|</h2>
    <h2>|–°—Ç–∞—Ç—É—Å —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥|</h2>
    <h2>|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∞—Ñ–æ–≤|</h2>
    <hr>
    <p>|–ü–µ–ª–º–µ–Ω—å –ê–Ω–¥—Ä–µ–µ–≤–∏—á|</p>
    <p>|–£–ø–ª–∞—á–µ–Ω—ã|</p>
    <p>|2|</p>
    <hr>
    <p>|–ë–µ–∫–º–∞–º–±–µ—Ç –¢—Ä–∞—Ö—Ç–µ–Ω–±–µ—Ä–≥–æ–≤–∏—á|</p>
    <p>|–ù–µ—É–ø–ª–∞—á–µ–Ω—ã|</p>
    <p>|1|</p>
    <hr>
    <p>|–ë–∞—Ç—Ç–ª—Ñ–∏–ª–¥ –û–≤–µ—Ä–≤–æ—Ç—á|</p>
    <p>|–ù–µ—É–ø–ª–∞—á–µ–Ω—ã|</p>
    <p>|3|</p>`);
    transfer_div.animate([ {opacity: 0}, {opacity: 1}], { duration: 1000});
}



function pinCode (func_name) { //–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è (–∑–∞–Ω–æ–≤–æ). 
  inputs = Array.from(document.querySelectorAll("input"));

  for (i = 0; i < inputs.length; i++) {
    if (inputs[i].value.length > 20 || inputs[i].value.length < 1) {
    inputs[i].style.border = "3px solid #ff483b";
    }
    else {
      inputs[i].style.border = "3px solid #3bff86"
    }
  }
  if (inputs.filter(input => input.value.length > 20) == 0 && inputs.filter(input => input.value.length < 1) == 0) {  
    let data = []
    for (i = 0; i < inputs.length; i++) {
      data.push(`'${inputs[i].value}'`);
    }
    let pin_modal = document.createElement("div");
    pin_modal.classList.add("pin-modal");
    document.body.append(pin_modal);
    pin_modal.insertAdjacentHTML("afterbegin", `    
    <div id="modal-overlay" class="modal-overlay">
      <div id="modal-window" class="modal-window">
        <div class="modal-header">
          <span class="modal-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è</span>
        </div>
        <div id="modal-body" class="modal-body">
          <input id="pin-input" type="password" autocomplete="off" maxlength="6" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∏–Ω-–∫–æ–¥: " name="pin-code" required>
        </div>
        <div class="modal-footer">
          <button type="button" onclick="pinCodeVerify(${func_name}, [${data}])" class="btn-orange">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
          <button id="modal_cancel_id" type="button" onclick="modalCancel()" class="btn-orange">–í—ã–π—Ç–∏</button>
        </div>
      </div>
    </div>`);
  }
}
function pinCodeVerify (func_name, data) { //–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.
  let pinInput = document.getElementById("pin-input");
  if (pinInput.value == "228133" ) {
    func_name(data);
    modalCancel();
  }
  else {
    pinInput.style.border = "3px solid #ff483b";
  }
}



function modalCancel () { //–ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏" –≤ –º–æ–¥–∞–ª–∫–∞—Ö
  let modal_btn = document.querySelectorAll("#modal_cancel_id");
  for (let i = 0; i < modal_btn.length; i++) {modal_btn[i].setAttribute("disabled", "disabled");}
  let modal = document.querySelector(".modal");
  let pin_modal = document.querySelector(".pin-modal");
  let modal_animate = [
    {opacity: "1"},
    {opacity: "0"}
  ]

  if (modal != null && pin_modal != null) {
    modal.animate(modal_animate, {duration: 1000})
    pin_modal.animate(modal_animate, {duration: 1000})
    setTimeout(() => {  modal.remove(); pin_modal.remove() }, 970);
  }
  else {
    modal.animate(modal_animate, {duration: 1000})
    setTimeout(() => {  modal.remove();}, 970);
  }
}



//–ñ—ë—Å—Ç–∫–æ –∑–∞—Å–ø–∏–¥—Ä–∞–Ω–∏–ª stuckoverflow –∑–∞ –¥–µ–Ω—å.
